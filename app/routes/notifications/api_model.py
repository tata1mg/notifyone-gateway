from torpedo.constants import HTTPMethod
from sanic_openapi import openapi

from app.routes.base_api_model import BaseApiModel, File


class ToOpenApiModel:
    email = openapi.Array(openapi.String(), desciption="List of email ids, required for email", required=False)
    mobile = openapi.Array(openapi.String(), desciption="List of 10 digit mobile numbers, required for sms/whatsapp", required=False)
    device = openapi.Array(openapi.String(), desciption="List of device registration ids (FCM), required for push notification", required=False)


class SenderOpenApiModel:
    name = openapi.String(description="Send name", example="Tata 1mg", required=False)
    address = openapi.String(description="Send email address", example="xyz@1mg.com", required=False)


class EmailChannelOpenApiModel:
    reply_to = openapi.String(description="Reply-to email ID", emample="reply-to@1mg.com", required=False)
    sender: SenderOpenApiModel

class ChannelsOpenApiModel:
    email = EmailChannelOpenApiModel

class NotificationOpenApiModel:
    id = openapi.Integer(example=3250, description="Notification Identifier")
    event_id = openapi.Integer(example=25, description="Event ID for this notification")
    notification_request_id = openapi.String(example="3e1ba047-71b1-4bd1-b510-613a50030b69", description="Unique ID generated by the Notification System")
    channel = openapi.String(example="push", description="Channel type of notification")
    status = openapi.String(example="SUCCESS", description="Current status. Possible values are - NEW/INITIATED/FAILED/SUCCESS/NOT_ELIGIBLE")
    sent_to = openapi.String(example="DEVICE1211212", description="Recipient address")
    source_identifier = openapi.String(example="ID1212122", description="Source identifier sent with the request")
    operator = openapi.String(example="FCM", description="Operator used to send out the notification")
    operator_event_id = openapi.String(example="A112123232323", description="Operator side ID for this notification")
    message = openapi.String(example="Success", description="Optional message")
    created = openapi.Integer(example=1679969481, description="Epoch time when the notification was created")
    updated = openapi.Integer(example=1679969481, description="Epoch time when the notification was last updated")


class GetNotificationApiResponseDataNotificationsOpenApiModel:
    notifications = openapi.Array(NotificationOpenApiModel)

class GetNotificationApiResponseDataOpenApiModel:
    data = GetNotificationApiResponseDataNotificationsOpenApiModel


class SendNotificationApiResponseDataOpenApiModel:
    request_id = openapi.String(description="Unique request ID generated by the Notification System for this request", example="3e1ba047-71b1-4bd1-b510-613a50030b69")
    message = openapi.String(description="a message string", example="success")
    processing_type = openapi.String(description="Processing type used for this request. It can SYNC or ASYNC", example="ASYNC")


class GetNotificationApiModel(BaseApiModel):

    _uri = "/get-notification"
    _name = "get_notification"
    _method = HTTPMethod.GET.value
    _summary = "API to get status of the triggered notification"
    _description = (
        "This API can be used to fetch the status of a notification request."
        "It returns list of notifications triggered for the notification request"
    )

    class RequestParamsOpenApiModel:
        notification_request_id = openapi.String(description="Request ID retured by the system for a notification request", example="3e1ba047-71b1-4bd1-b510-613a50030b69", required=True)

    class ResponseBodyOpenApiModel:
        data = GetNotificationApiResponseDataOpenApiModel
        is_success = openapi.Boolean(description="true/false to denote if the request was successful or not", example=True)
        status_code = openapi.Integer(description="Http response status code", example=200)


class SendNotificationApiModel(BaseApiModel):

    _uri = "/send-notification"
    _name = "send_notification"
    _method = HTTPMethod.POST.value
    _summary = "API to sent out event notification"
    _description = (
        "This API can be used to trigger notifications for an already created event."
        "The API triggers notifications for all the active and eligible channels in the event. The processing can either be ASYNC or SYNC depending upon the event priority"
    )

    class RequestBodyOpenApiModel:
        event_id = openapi.Integer(example=25, description="Event ID for this notification")
        source_identifier = openapi.String(example="ID1212122", description="Source identifier sent with the request")
        to = ToOpenApiModel,
        channels = ChannelsOpenApiModel
        attachments = openapi.Array(File, required=False, descriptions="List of files to be attached with the email/whatsapp")
        body = openapi.Dict

    class ResponseBodyOpenApiModel:
        data = SendNotificationApiResponseDataOpenApiModel
        is_success = openapi.Boolean(description="true/false to denote if the request was successful or not", example=True)
        status_code = openapi.Integer(description="Http response status code", example=200)
